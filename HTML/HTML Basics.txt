HTML Basics 

-> The role of HTML in the Web Ecosystem
-> How to build a simple HTML page
-> The HTML document heading
-> The HTML document body 
-> The most important HTML tags 
-> How to create links 
-> How to add images to an HTML page 
-> HTML container tags 
-> What is a form and how to create it 

Introduction to HTML: 

- HTML's success is based on one thing: simplicity.
- Another big feature of HTML is forgiveness.
- It never broke backward compatibility
- We can inspect the HTML of any web page.

The HTML Basics:

-The markup language we use to structure content that we consume on the Web.
-HTML is served to the browser in different ways:
    - It can be generated by a server-side application that builds it depending on the request or the session data,
    for example a Rails or Laravel or Django application. 
    - It can be generated by a JavaScript client-side application that generates HTML on the fly.
    - In the simplest case, it can be stored in a file and served to the browser by a Web Server.
- Inside the .html or .htm extension file, we organize the content using tags. 
- Tags wrap the content, and it gives special meaning to the text it wraps.
- HTML is not presentational. It's not concerned with how things look. Instead, it's concerned with 
what things mean.
- It's up to the browser to determine how things look, with the directives defined by who builds the poge, with the 
CSS language.

The Structure of an HTML page:

- Things start with the Document Type Declaration (aka doctype), a way to tell the browser this 
is an HTML page, and which version of HTML we are using

HTML Tags vs Elements:

- An element constitutes the whole package:
    -> Starting tag 
    -> text content (and possibly other elements)
    -> closing tag
- IF an element doesn't have a closing tag, it is only written with the starting tag, and it cannot 
contain any text content.

HTML Attributes:

- Starting tag of an element can have special snippets of information we can attach, called attributes.
- Attributes have the key = "value" syntax:
- Use double quotation marks in enclosing the special snippets of information "attributes"
- and some attributes are boolean, meaning you only need the key:
- Class and ID - two most common attributes 
- ID is unique in the context of a web page; it cannot be duplicated.
- Classes, on the other hand, can appear multiple times on multiple elements.
- An ID is just one value. Class can hold multiple values, separated by a space:
- Style attribute which can be used to insert inline CSS rules on an element. 

Case Sensitivity and White space:

- HTML is case insensitive. Tags can be written in all caps, or lowercase.
- In HTML, even if you add multiple white spaces into a line, it's collapsed to just one space 
by the browser's CSS engine. 
- Nested tags should be indented. Use 2 or 4 characters, depending on your preference.

The <head> tag:

- The head tag contains special tags that define the document properties. 
- It's always written before the body tag, right after the opening HTML Tag:
- We never use attributes on this tag. And we don't write content in it. 
- It's just container for other tags.
- It can have a wide variety of tags: 
    - title 
    - script 
    - noscript
    - link
    - style 
    - meta 

- The <title> tag: determines the page title. Title is displayed in the browser, and it's especially important
as it's one of the key factors for Search Engine Optimization (SEO).

- The <script> tag: used to add JavaScript into the page. You can include it inline, using the JavaScript code and then the closing tag, or you can load an external JavaScript file by using the src attribute:
   - Sometimes this tag is used at the bottom of the page, just before the closing </body> tag. Why? For performance reasons. 
   - Loading scripts by default blocks the rendering of the page, until the script is parsed and loaded.
   - By putting it at the bottom of the page, the script is loaded and executed AFTER the whole page is already parsed and loaded, giving a better experience to the user over keeping it in the head tag.
   - More performant than the <script src="insertfile.js"></script>, is the:
   <script defer src="insertfile.js"></script>
   - Instead of putting the script tag before the </body> tag, use the above script tag 
   - <script defer src="insertfile.js"></script>
       -> triggers a fast path to a fast-loading page, and fast-loading JavaScript 
       -> Note: the async attribute is similar, but in my opinion a worse option than defer. 

- The <noscript> tag: used to detect when scripts are disabled in the browser. 
    Note: users can choose to disable JavaScript scripts in the browser settings. Or the browser might not support them by default.
    - It's used differently depending on whether it's put in the document head or in the document body. 
    - In the document head usage of <noscript> tag, in which <noscript> tag can only contain other tags:
        - link tags 
        - style tags 
        - meta tags
    - to alter the resources served by the page, or the meta information, if scripts are disabled. 
    - In this example I set an element with the no-script-alert class to display if scripts are disabled, as it was display: none by default:
    - If put in the <body> tag, it can contain content, like paragraphs and other tags, which are rendered in the UI.

- The <link> tag: is used to set relationships between a document and other resources.
    - It's mainly used to link an external CSS file to be loaded.
    - This element has no closing tag. 
    - The media attribute allows the loading of different stylesheets depending on the device capabilities:
    - We can also link to resources other than stylesheets.
    - For Example we can associate an RSS feed using :
    - Or we can associate a favicon using : 
    - This tag was also used for multi-page content, to indicate the previous and next page using rel="prev" and rel="next". 
    - As of 2019, Google announced it does not use this tag any more because it can find the correct page structure without it. 
    - https://twitter.com/googlesearchc/status/1108726443251519489

- The <style> tag:
    - This tag can be used to add styles into the document, rather than loading an external stylesheet.
    - As with the link tag, you can use the media attribute to use that CSS only on the specified medium:

- The <meta> tag:
    - meta tags perform a variety of tasks and they are very, very important.
    - especially for SEO.
    - meta elements ONLY HAVE the STARTING TAG. 
    - The most basic one is the description meta tag:
    - This might be used by Google to generate the page description in its result pages, if it finds it better describes the page than the on-page content
    - The <charset> meta tag is used to set the page character encoding, utf-8 in most cases:
    - The <robots> meta tag instructs the Search Engine bots whether to index a page or not:
    - or if they should follow links or not: 
    - You can set nofollow on individual links, too. This is how you can set nofollow globally.
    - You can combine them:
    - The default behaviour is index, follow. 
    - You can use other properties, including 
        - nosnippet 
        - noarchive 
        - noimageindex and more.
    - You can also just tell Google instead of targeting all search engines:
    - Other search engines might have their own meta tag, too. 
    - We can tell Google to disable some features. This prevents the translate functionality in the search engine results:
    - the <viewport> meta tag is used to tell the browser to set the page width based on the device width.
    - other popular meta tag <http-equiv="refresh"> one. This line tells the browser to wait 3 seconds, then redirect to that other page:
    - Using 0 instead of 3 will redirect as soon as possible.


The <title> tag: 

    - The title tag determines the page title. The title is displayed in the browser, and it's especially 
    important as it's one off the key factors for Search Engine Optimization (SEO)

The <script> tag: 

    - This tag is used to add JavaScript into the page. 
    - You can include it inline, using an opening tag, the JavaScript code and then the closing tag: 
    - Or you can load an external JavaScript file by using the src attribute: 

The <link> tag: 

    - The link tag is used to set relationships between a document and other resources. 
    - It's mainly used to link an external CSS file to be loaded. 
    - This element has no closing tag. 
    - The media attribute allows the loading of different stylesheets depending on the device capabilities: 
    - We can also link to resources other than stylesheets.
    - For example we can associate an RSS feed using 
    - This tag was also used for multi-page content, to indicate the previous and next page using rel="prev" and rel="next".

The <style> tag: 

    - This tag can be used to add styles into the document, rather than loading an external stylesheet. 

The <meta> tag: 

    - same as the description above for <meta tag>



The Document Body 

    - After the closing head tag, we can only have one thing in an HTML document: the body element. 
    - Just like the head and html tags, we can only have one body in one page.
    - Inside the body tag we have all the tags that define the content of the page. 
    - Technically, the start and ending tags are optional; I consider it a good practice to add them. Just for clarity.

Block elements vs inline elements: 

    - Visual elements, the one defined in the page body, can be generally classified in 2 categories: 
        - block elements (p, div, heading elements, lists and list items, ...)
        - inline elements (a, span, img, ...)
    - What is the difference? 
        - Block elements, when positioned in the page, do not allow other elements next to them. To the left, or to the right.
        - Inline elements instead can sit next to other inline elements.
        - The difference also lies in the visual properties we can edit using CSS. We can alter the width/height, margin, padding and border of block elements.
        - Note that using CSS we can change the default for each elements, setting a "p" tag to be inline, for example, or a span to be a block element.
        - Another difference is that inline elements can be contained in block elements. The reverse is not true.
        - Some block elements can contain other block elements, but it depends. The p tag for example does not allow such option.

The <p> and <span> tags: 

    - The <p> tag defines a paragraph of text. 
    - It's a block element.
    - We can add any inline element we like, like "span" or "a" 
    - WE CANNOT ADD BLOCK ELEMENTS 
    - We cannot nest a p element into another one. 
    - By default browsers style a paragraph with a margin on top and at the bottom. 16px in Chrome, but the exact value might vary between browsers. 
    - This causes two consecutive paragraphs to be spaced, replicating what we think of a "paragraph" in printed text. 
    - The <span> tag is an inline tag that can be used to create a section in a paragraph that can be styled differently using CSS: 

The heading tags:

    - HTML provides us 6 heading tags. From most important to least important, we have h1, h2, h3, h4, h5, h6.
    - Typically a page will have one h1 element, which is the page title. Then you might have one or more h2 elements depending on the page content.
    - Headings, especially the heading organization, are also essential for SEO, and search engines use them in various ways.
    - All headings are block elements. They cannot contain other elements, just text.

Lists:

    - We have 2 main kinds of lists:
        - Unordered lists 
        - Ordered lists 
    - Unordered lists are created using the ul tag. Each item in the list is created with the li tag:
    - Ordered lists are similar, just made with the ol tag: 

Links: 

    - Links are defined using the "a" tag. The link destination is set via its href attribute. 
    - Between the starting and closing tag we have the link text. 
    - The above example is an absolute URL. Links also work with relative URLs:
    - In this case, when clicking the link the user is moved to the /test URL on the current origin. 
    - Be careful with the "/" character. If omitted, instead of starting from the origin, the browser will just add the test string to the current URL. 
    - Example, I'm on the page https://flaviocopes.com/axios/ and I have these links:
        - /test once clicked brings me to https://flaviocopes.com/test
        - test once clicked brings me to https://flaviocopes.com/axios/test 
    - Link tags can include other things inside them, not just text. For example, images:
    - OR any other element, except other <a> tags
    - If you want to open the link in a new tab, you can use the target attribute: 

Images:

    - Images can be displayed using the <img> tag. 
    - This tag accepts a "src" attribute, which we use to set the image source:
    - We can use a wide set of images. The most common ones are PNG, JPEG, GIF, SVG and more recently WebP.
    - The HTML standard requires an "alt" attribute to be present, to describe the image. This is used by screen readers and also by search engine bots: 
    - You can set the width and height attributes to set the space that the element will take, so that the browser can account for it and it does not change the layout when it's fully loaded. 
    - It takes a numeric value, expressed in pixels.